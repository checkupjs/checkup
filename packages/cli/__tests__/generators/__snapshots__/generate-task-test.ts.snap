// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`task generator generates correct files with JavaScript 1`] = `
"import { BaseTask, Category, Priority } from '@checkup/core';
import MyFooTaskResult from '../results/my-foo-task-result';

export default class MyFooTask extends BaseTask {
  meta = {
    taskName: 'my-foo',
    friendlyTaskName: 'My Foo',
    taskClassification: {
      category: Category.Insights,
      priority: Priority.Low,
    },
  };

  async run() {
    let result = new MyFooTaskResult(this.meta);

    return result;
  }
}"
`;

exports[`task generator generates correct files with JavaScript 2`] = `
"import { BaseTaskResult, ui } from '@checkup/core';

export default class MyFooTaskResult extends BaseTaskResult {
  toConsole() {
    ui.styledHeader(this.meta.friendlyTaskName);
  }

  toJson() {
    return {
      meta: this.meta,
      result: {},
    };
  }

  toReportData() {}
}
"
`;

exports[`task generator generates correct files with JavaScript 3`] = `
"import { CheckupProject, stdout } from '@checkup/test-helpers';
import MyFooTask from '../src/tasks/my-foo-task';
import MyFooTaskResult from '../src/results/my-foo-task-result';

describe('my-foo-task', () => {
  let checkupProject;

  beforeEach(() => {
    checkupProject = new CheckupProject('checkup-app', '0.0.0', project => {
      project.addDependency('ember-cli', '^3.15.0');
    });

    checkupProject.writeSync();
    checkupProject.gitInit();
  });

  afterEach(() => {
    checkupProject.dispose();
  });

  it('can read task and output to console', async () => {
    const taskResult = await new MyFooTask({ path: checkupProject.baseDir }).run();

    taskResult.toConsole();

    expect(stdout()).toMatchSnapshot();
  });

  it('can read task as JSON', async () => {
    const taskResult = await new MyFooTask({ path: checkupProject.baseDir }).run();

    expect(taskResult.toJson()).toMatchSnapshot();
  });
});"
`;

exports[`task generator generates correct files with JavaScript 4`] = `
"import { Hook } from '@oclif/config';

import MyFooTask from '../tasks/my-foo-task';

const hook = async function({ context, tasks }) {
  tasks.registerTask(new MyFooTask(context));
};

export default hook;
"
`;

exports[`task generator generates correct files with TypeScript for defaults 1`] = `
"import { BaseTask, Category, Priority, Task, TaskMetaData, TaskResult } from '@checkup/core';
import MyFooTaskResult from '../results/my-foo-task-result';

export default class MyFooTask extends BaseTask implements Task {
  meta: TaskMetaData = {
    taskName: 'my-foo',
    friendlyTaskName: 'My Foo',
    taskClassification: {
      category: Category.Insights,
      priority: Priority.Low,
    },
  };

  async run(): Promise<TaskResult> {
    let result: MyFooTaskResult = new MyFooTaskResult(this.meta);

    return result;
  }
}"
`;

exports[`task generator generates correct files with TypeScript for defaults 2`] = `
"import { BaseTaskResult, TaskResult, ui } from '@checkup/core';

export default class MyFooTaskResult extends BaseTaskResult implements TaskResult {
  toConsole() {
    ui.styledHeader(this.meta.friendlyTaskName);
  }

  toJson() {
    return {
      meta: this.meta,
      result: {},
    };
  }

  toReportData() {}
}
"
`;

exports[`task generator generates correct files with TypeScript for defaults 3`] = `
"import { CheckupProject, stdout } from '@checkup/test-helpers';
import MyFooTask from '../src/tasks/my-foo-task';
import MyFooTaskResult from '../src/results/my-foo-task-result';

describe('my-foo-task', () => {
  let checkupProject: CheckupProject;

  beforeEach(() => {
    checkupProject = new CheckupProject('checkup-app', '0.0.0', project => {
      project.addDependency('ember-cli', '^3.15.0');
    });

    checkupProject.writeSync();
    checkupProject.gitInit();
  });

  afterEach(() => {
    checkupProject.dispose();
  });

  it('can read task and output to console', async () => {
    const result = await new MyFooTask({ path: checkupProject.baseDir }).run();
    const taskResult = <MyFooTaskResult>result;

    taskResult.toConsole();

    expect(stdout()).toMatchSnapshot();
  });

  it('can read task as JSON', async () => {
    const result = await new MyFooTask({ path: checkupProject.baseDir }).run();
    const taskResult = <MyFooTaskResult>result;

    expect(taskResult.toJson()).toMatchSnapshot();
  });
});"
`;

exports[`task generator generates correct files with TypeScript for defaults 4`] = `
"import { Hook } from '@oclif/config';

import MyFooTask from '../tasks/my-foo-task';

const hook: Hook<'register-tasks'> = async function({ context, tasks }: any) {
  tasks.registerTask(new MyFooTask(context));
};

export default hook;
"
`;

exports[`task generator generates correct files with category 1`] = `
"import { BaseTask, Category, Priority, Task, TaskMetaData, TaskResult } from '@checkup/core';
import MyFooTaskResult from '../results/my-foo-task-result';

export default class MyFooTask extends BaseTask implements Task {
  meta: TaskMetaData = {
    taskName: 'my-foo',
    friendlyTaskName: 'My Foo',
    taskClassification: {
      category: Category.Insights,
      priority: Priority.Low,
    },
  };

  async run(): Promise<TaskResult> {
    let result: MyFooTaskResult = new MyFooTaskResult(this.meta);

    return result;
  }
}"
`;

exports[`task generator generates correct files with category 2`] = `
"import { BaseTaskResult, TaskResult, ui } from '@checkup/core';

export default class MyFooTaskResult extends BaseTaskResult implements TaskResult {
  toConsole() {
    ui.styledHeader(this.meta.friendlyTaskName);
  }

  toJson() {
    return {
      meta: this.meta,
      result: {},
    };
  }

  toReportData() {}
}
"
`;

exports[`task generator generates correct files with category 3`] = `
"import { CheckupProject, stdout } from '@checkup/test-helpers';
import MyFooTask from '../src/tasks/my-foo-task';
import MyFooTaskResult from '../src/results/my-foo-task-result';

describe('my-foo-task', () => {
  let checkupProject: CheckupProject;

  beforeEach(() => {
    checkupProject = new CheckupProject('checkup-app', '0.0.0', project => {
      project.addDependency('ember-cli', '^3.15.0');
    });

    checkupProject.writeSync();
    checkupProject.gitInit();
  });

  afterEach(() => {
    checkupProject.dispose();
  });

  it('can read task and output to console', async () => {
    const result = await new MyFooTask({ path: checkupProject.baseDir }).run();
    const taskResult = <MyFooTaskResult>result;

    taskResult.toConsole();

    expect(stdout()).toMatchSnapshot();
  });

  it('can read task as JSON', async () => {
    const result = await new MyFooTask({ path: checkupProject.baseDir }).run();
    const taskResult = <MyFooTaskResult>result;

    expect(taskResult.toJson()).toMatchSnapshot();
  });
});"
`;

exports[`task generator generates correct files with category 4`] = `
"import { Hook } from '@oclif/config';

import MyFooTask from '../tasks/my-foo-task';

const hook: Hook<'register-tasks'> = async function({ context, tasks }: any) {
  tasks.registerTask(new MyFooTask(context));
};

export default hook;
"
`;

exports[`task generator generates correct files with priority 1`] = `
"import { BaseTask, Category, Priority, Task, TaskMetaData, TaskResult } from '@checkup/core';
import MyFooTaskResult from '../results/my-foo-task-result';

export default class MyFooTask extends BaseTask implements Task {
  meta: TaskMetaData = {
    taskName: 'my-foo',
    friendlyTaskName: 'My Foo',
    taskClassification: {
      category: Category.Insights,
      priority: Priority.High,
    },
  };

  async run(): Promise<TaskResult> {
    let result: MyFooTaskResult = new MyFooTaskResult(this.meta);

    return result;
  }
}"
`;

exports[`task generator generates correct files with priority 2`] = `
"import { BaseTaskResult, TaskResult, ui } from '@checkup/core';

export default class MyFooTaskResult extends BaseTaskResult implements TaskResult {
  toConsole() {
    ui.styledHeader(this.meta.friendlyTaskName);
  }

  toJson() {
    return {
      meta: this.meta,
      result: {},
    };
  }

  toReportData() {}
}
"
`;

exports[`task generator generates correct files with priority 3`] = `
"import { CheckupProject, stdout } from '@checkup/test-helpers';
import MyFooTask from '../src/tasks/my-foo-task';
import MyFooTaskResult from '../src/results/my-foo-task-result';

describe('my-foo-task', () => {
  let checkupProject: CheckupProject;

  beforeEach(() => {
    checkupProject = new CheckupProject('checkup-app', '0.0.0', project => {
      project.addDependency('ember-cli', '^3.15.0');
    });

    checkupProject.writeSync();
    checkupProject.gitInit();
  });

  afterEach(() => {
    checkupProject.dispose();
  });

  it('can read task and output to console', async () => {
    const result = await new MyFooTask({ path: checkupProject.baseDir }).run();
    const taskResult = <MyFooTaskResult>result;

    taskResult.toConsole();

    expect(stdout()).toMatchSnapshot();
  });

  it('can read task as JSON', async () => {
    const result = await new MyFooTask({ path: checkupProject.baseDir }).run();
    const taskResult = <MyFooTaskResult>result;

    expect(taskResult.toJson()).toMatchSnapshot();
  });
});"
`;

exports[`task generator generates correct files with priority 4`] = `
"import { Hook } from '@oclif/config';

import MyFooTask from '../tasks/my-foo-task';

const hook: Hook<'register-tasks'> = async function({ context, tasks }: any) {
  tasks.registerTask(new MyFooTask(context));
};

export default hook;
"
`;

exports[`task generator generates multiple correct files with TypeScript for defaults 1`] = `
"import { BaseTask, Category, Priority, Task, TaskMetaData, TaskResult } from '@checkup/core';
import MyFooTaskResult from '../results/my-foo-task-result';

export default class MyFooTask extends BaseTask implements Task {
  meta: TaskMetaData = {
    taskName: 'my-foo',
    friendlyTaskName: 'My Foo',
    taskClassification: {
      category: Category.Insights,
      priority: Priority.Low,
    },
  };

  async run(): Promise<TaskResult> {
    let result: MyFooTaskResult = new MyFooTaskResult(this.meta);

    return result;
  }
}"
`;

exports[`task generator generates multiple correct files with TypeScript for defaults 2`] = `
"import { BaseTaskResult, TaskResult, ui } from '@checkup/core';

export default class MyFooTaskResult extends BaseTaskResult implements TaskResult {
  toConsole() {
    ui.styledHeader(this.meta.friendlyTaskName);
  }

  toJson() {
    return {
      meta: this.meta,
      result: {},
    };
  }

  toReportData() {}
}
"
`;

exports[`task generator generates multiple correct files with TypeScript for defaults 3`] = `
"import { CheckupProject, stdout } from '@checkup/test-helpers';
import MyFooTask from '../src/tasks/my-foo-task';
import MyFooTaskResult from '../src/results/my-foo-task-result';

describe('my-foo-task', () => {
  let checkupProject: CheckupProject;

  beforeEach(() => {
    checkupProject = new CheckupProject('checkup-app', '0.0.0', project => {
      project.addDependency('ember-cli', '^3.15.0');
    });

    checkupProject.writeSync();
    checkupProject.gitInit();
  });

  afterEach(() => {
    checkupProject.dispose();
  });

  it('can read task and output to console', async () => {
    const result = await new MyFooTask({ path: checkupProject.baseDir }).run();
    const taskResult = <MyFooTaskResult>result;

    taskResult.toConsole();

    expect(stdout()).toMatchSnapshot();
  });

  it('can read task as JSON', async () => {
    const result = await new MyFooTask({ path: checkupProject.baseDir }).run();
    const taskResult = <MyFooTaskResult>result;

    expect(taskResult.toJson()).toMatchSnapshot();
  });
});"
`;

exports[`task generator generates multiple correct files with TypeScript for defaults 4`] = `
"import { BaseTask, Category, Priority, Task, TaskMetaData, TaskResult } from '@checkup/core';
import MyBarTaskResult from '../results/my-bar-task-result';

export default class MyBarTask extends BaseTask implements Task {
  meta: TaskMetaData = {
    taskName: 'my-bar',
    friendlyTaskName: 'My Bar',
    taskClassification: {
      category: Category.Insights,
      priority: Priority.Low,
    },
  };

  async run(): Promise<TaskResult> {
    let result: MyBarTaskResult = new MyBarTaskResult(this.meta);

    return result;
  }
}"
`;

exports[`task generator generates multiple correct files with TypeScript for defaults 5`] = `
"import { BaseTaskResult, TaskResult, ui } from '@checkup/core';

export default class MyBarTaskResult extends BaseTaskResult implements TaskResult {
  toConsole() {
    ui.styledHeader(this.meta.friendlyTaskName);
  }

  toJson() {
    return {
      meta: this.meta,
      result: {},
    };
  }

  toReportData() {}
}
"
`;

exports[`task generator generates multiple correct files with TypeScript for defaults 6`] = `
"import { CheckupProject, stdout } from '@checkup/test-helpers';
import MyBarTask from '../src/tasks/my-bar-task';
import MyBarTaskResult from '../src/results/my-bar-task-result';

describe('my-bar-task', () => {
  let checkupProject: CheckupProject;

  beforeEach(() => {
    checkupProject = new CheckupProject('checkup-app', '0.0.0', project => {
      project.addDependency('ember-cli', '^3.15.0');
    });

    checkupProject.writeSync();
    checkupProject.gitInit();
  });

  afterEach(() => {
    checkupProject.dispose();
  });

  it('can read task and output to console', async () => {
    const result = await new MyBarTask({ path: checkupProject.baseDir }).run();
    const taskResult = <MyBarTaskResult>result;

    taskResult.toConsole();

    expect(stdout()).toMatchSnapshot();
  });

  it('can read task as JSON', async () => {
    const result = await new MyBarTask({ path: checkupProject.baseDir }).run();
    const taskResult = <MyBarTaskResult>result;

    expect(taskResult.toJson()).toMatchSnapshot();
  });
});"
`;

exports[`task generator generates multiple correct files with TypeScript for defaults 7`] = `
"import { Hook } from '@oclif/config';

import MyBarTask from '../tasks/my-bar-task';

import MyFooTask from '../tasks/my-foo-task';

const hook: Hook<'register-tasks'> = async function({ context, tasks }: any) {
  tasks.registerTask(new MyFooTask(context));
  tasks.registerTask(new MyBarTask(context));
};

export default hook;
"
`;
