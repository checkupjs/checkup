// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`task generator generates correct files with JavaScript 1`] = `
"const { BaseTask } = require('@checkup/core');

module.exports = class MyFooTask extends BaseTask {
  taskName = 'my-foo';
  taskDisplayName = 'My Foo';
  description = 'Some description';
  category = 'foo';
  group = 'bar';


  async run() {
    this.addResult(
      \`\${this.taskName} result\`,
      'informational',
      'note'
    );

    return this.results;
  }
}
"
`;

exports[`task generator generates correct files with JavaScript 2`] = `
"import { CheckupProject, getTaskContext } from '@checkup/test-helpers';
import { getPluginName } from '@checkup/core';
import MyFooTask from '../src/tasks/my-foo-task';

describe('my-foo-task', () => {
  let project;
  let pluginName = getPluginName(__dirname);

  beforeEach(() => {
    project = new CheckupProject('checkup-app', '0.0.0', project => {
      // add dependencies here
    });

    project.writeSync();
    project.gitInit();
  });

  afterEach(() => {
    project.dispose();
  });

  it('can read task as JSON', async () => {
    const result = await new MyFooTask(
      pluginName, 
      getTaskContext({
        options: { cwd: project.baseDir },
        pkg: project.pkg,
      })).run();

    expect(result).toMatchSnapshot();
  });
});
"
`;

exports[`task generator generates correct files with JavaScript 3`] = `
"let { getPluginName } = require('@checkup/core');

const MyFooTask = require('./tasks/my-foo-task');

module.exports = {
  register: function(args) {
    let pluginName = getPluginName(__dirname);

    args.register.task(new MyFooTask(pluginName, args.context));
  }
}
"
`;

exports[`task generator generates correct files with TypeScript for defaults 1`] = `
"import { BaseTask, Task } from '@checkup/core';
import { Result } from 'sarif';

export default class MyFooTask extends BaseTask implements Task {
  taskName = 'my-foo';
  taskDisplayName = 'My Foo';
  description = '';
  category = '';

  async run(): Promise<Result[]> {
    this.addResult(
      \`\${this.taskName} result\`,
      'informational',
      'note'
    );
      
    return this.results;
  }
}
"
`;

exports[`task generator generates correct files with TypeScript for defaults 2`] = `
"import { CheckupProject, getTaskContext } from '@checkup/test-helpers';
import { getPluginName } from '@checkup/core';
import MyFooTask from '../src/tasks/my-foo-task';

describe('my-foo-task', () => {
  let project: CheckupProject;
  let pluginName = getPluginName(__dirname);

  beforeEach(() => {
    project = new CheckupProject('checkup-app', '0.0.0', project => {
      // add dependencies here
    });

    project.writeSync();
    project.gitInit();
  });

  afterEach(() => {
    project.dispose();
  });

  it('can read task as JSON', async () => {
    const result = await new MyFooTask(
      pluginName, 
      getTaskContext({
        options: { cwd: project.baseDir },
        pkg: project.pkg,
      })).run();

    expect(result).toMatchSnapshot();
  });
});
"
`;

exports[`task generator generates correct files with TypeScript for defaults 3`] = `
"import { RegistrationArgs, getPluginName } from '@checkup/core';

import MyFooTask from './tasks/my-foo-task';

export function register(args: RegistrationArgs) {
  let pluginName = getPluginName(__dirname);

  args.register.task(new MyFooTask(pluginName, args.context));
}
"
`;

exports[`task generator generates correct files with TypeScript for defaults in custom path 1`] = `
"import { BaseTask, Task } from '@checkup/core';
import { Result } from 'sarif';

export default class MyFooTask extends BaseTask implements Task {
  taskName = 'my-foo';
  taskDisplayName = 'My Foo';
  description = '';
  category = '';

  async run(): Promise<Result[]> {
    this.addResult(
      \`\${this.taskName} result\`,
      'informational',
      'note'
    );
      
    return this.results;
  }
}
"
`;

exports[`task generator generates correct files with TypeScript for defaults in custom path 2`] = `
"import { CheckupProject, getTaskContext } from '@checkup/test-helpers';
import { getPluginName } from '@checkup/core';
import MyFooTask from '../src/tasks/my-foo-task';

describe('my-foo-task', () => {
  let project: CheckupProject;
  let pluginName = getPluginName(__dirname);

  beforeEach(() => {
    project = new CheckupProject('checkup-app', '0.0.0', project => {
      // add dependencies here
    });

    project.writeSync();
    project.gitInit();
  });

  afterEach(() => {
    project.dispose();
  });

  it('can read task as JSON', async () => {
    const result = await new MyFooTask(
      pluginName, 
      getTaskContext({
        options: { cwd: project.baseDir },
        pkg: project.pkg,
      })).run();

    expect(result).toMatchSnapshot();
  });
});
"
`;

exports[`task generator generates correct files with TypeScript for defaults in custom path 3`] = `
"import { RegistrationArgs, getPluginName } from '@checkup/core';

import MyFooTask from './tasks/my-foo-task';

export function register(args: RegistrationArgs) {
  let pluginName = getPluginName(__dirname);

  args.register.task(new MyFooTask(pluginName, args.context));
}
"
`;

exports[`task generator generates correct files with category 1`] = `
"import { BaseTask, Task } from '@checkup/core';
import { Result } from 'sarif';

export default class MyFooTask extends BaseTask implements Task {
  taskName = 'my-foo';
  taskDisplayName = 'My Foo';
  description = 'Some description';
  category = 'foo';
  group = 'bar';

  async run(): Promise<Result[]> {
    this.addResult(
      \`\${this.taskName} result\`,
      'informational',
      'note'
    );
      
    return this.results;
  }
}
"
`;

exports[`task generator generates correct files with category 2`] = `
"import { CheckupProject, getTaskContext } from '@checkup/test-helpers';
import { getPluginName } from '@checkup/core';
import MyFooTask from '../src/tasks/my-foo-task';

describe('my-foo-task', () => {
  let project: CheckupProject;
  let pluginName = getPluginName(__dirname);

  beforeEach(() => {
    project = new CheckupProject('checkup-app', '0.0.0', project => {
      // add dependencies here
    });

    project.writeSync();
    project.gitInit();
  });

  afterEach(() => {
    project.dispose();
  });

  it('can read task as JSON', async () => {
    const result = await new MyFooTask(
      pluginName, 
      getTaskContext({
        options: { cwd: project.baseDir },
        pkg: project.pkg,
      })).run();

    expect(result).toMatchSnapshot();
  });
});
"
`;

exports[`task generator generates correct files with category 3`] = `
"import { RegistrationArgs, getPluginName } from '@checkup/core';

import MyFooTask from './tasks/my-foo-task';

export function register(args: RegistrationArgs) {
  let pluginName = getPluginName(__dirname);

  args.register.task(new MyFooTask(pluginName, args.context));
}
"
`;

exports[`task generator generates correct files with group 1`] = `
"import { BaseTask, Task } from '@checkup/core';
import { Result } from 'sarif';

export default class MyFooTask extends BaseTask implements Task {
  taskName = 'my-foo';
  taskDisplayName = 'My Foo';
  description = 'Some description';
  category = 'foo';
  group = 'bar';

  async run(): Promise<Result[]> {
    this.addResult(
      \`\${this.taskName} result\`,
      'informational',
      'note'
    );
      
    return this.results;
  }
}
"
`;

exports[`task generator generates correct files with group 2`] = `
"import { CheckupProject, getTaskContext } from '@checkup/test-helpers';
import { getPluginName } from '@checkup/core';
import MyFooTask from '../src/tasks/my-foo-task';

describe('my-foo-task', () => {
  let project: CheckupProject;
  let pluginName = getPluginName(__dirname);

  beforeEach(() => {
    project = new CheckupProject('checkup-app', '0.0.0', project => {
      // add dependencies here
    });

    project.writeSync();
    project.gitInit();
  });

  afterEach(() => {
    project.dispose();
  });

  it('can read task as JSON', async () => {
    const result = await new MyFooTask(
      pluginName, 
      getTaskContext({
        options: { cwd: project.baseDir },
        pkg: project.pkg,
      })).run();

    expect(result).toMatchSnapshot();
  });
});
"
`;

exports[`task generator generates correct files with group 3`] = `
"import { RegistrationArgs, getPluginName } from '@checkup/core';

import MyFooTask from './tasks/my-foo-task';

export function register(args: RegistrationArgs) {
  let pluginName = getPluginName(__dirname);

  args.register.task(new MyFooTask(pluginName, args.context));
}
"
`;

exports[`task generator generates correct files with typescript 1`] = `
"import { BaseTask, Task } from '@checkup/core';
import { Result } from 'sarif';

export default class MyFooTask extends BaseTask implements Task {
  taskName = 'my-foo';
  taskDisplayName = 'My Foo';
  description = 'Some description';
  category = 'foo';
  group = 'bar';

  async run(): Promise<Result[]> {
    this.addResult(
      \`\${this.taskName} result\`,
      'informational',
      'note'
    );
      
    return this.results;
  }
}
"
`;

exports[`task generator generates correct files with typescript 2`] = `
"import { CheckupProject, getTaskContext } from '@checkup/test-helpers';
import { getPluginName } from '@checkup/core';
import MyFooTask from '../src/tasks/my-foo-task';

describe('my-foo-task', () => {
  let project: CheckupProject;
  let pluginName = getPluginName(__dirname);

  beforeEach(() => {
    project = new CheckupProject('checkup-app', '0.0.0', project => {
      // add dependencies here
    });

    project.writeSync();
    project.gitInit();
  });

  afterEach(() => {
    project.dispose();
  });

  it('can read task as JSON', async () => {
    const result = await new MyFooTask(
      pluginName, 
      getTaskContext({
        options: { cwd: project.baseDir },
        pkg: project.pkg,
      })).run();

    expect(result).toMatchSnapshot();
  });
});
"
`;

exports[`task generator generates correct files with typescript 3`] = `
"import { RegistrationArgs, getPluginName } from '@checkup/core';

import MyFooTask from './tasks/my-foo-task';

export function register(args: RegistrationArgs) {
  let pluginName = getPluginName(__dirname);

  args.register.task(new MyFooTask(pluginName, args.context));
}
"
`;

exports[`task generator generates multiple correct files with TypeScript for defaults 1`] = `
"import { BaseTask, Task } from '@checkup/core';
import { Result } from 'sarif';

export default class MyFooTask extends BaseTask implements Task {
  taskName = 'my-foo';
  taskDisplayName = 'My Foo';
  description = '';
  category = '';

  async run(): Promise<Result[]> {
    this.addResult(
      \`\${this.taskName} result\`,
      'informational',
      'note'
    );
      
    return this.results;
  }
}
"
`;

exports[`task generator generates multiple correct files with TypeScript for defaults 2`] = `
"import { CheckupProject, getTaskContext } from '@checkup/test-helpers';
import { getPluginName } from '@checkup/core';
import MyFooTask from '../src/tasks/my-foo-task';

describe('my-foo-task', () => {
  let project: CheckupProject;
  let pluginName = getPluginName(__dirname);

  beforeEach(() => {
    project = new CheckupProject('checkup-app', '0.0.0', project => {
      // add dependencies here
    });

    project.writeSync();
    project.gitInit();
  });

  afterEach(() => {
    project.dispose();
  });

  it('can read task as JSON', async () => {
    const result = await new MyFooTask(
      pluginName, 
      getTaskContext({
        options: { cwd: project.baseDir },
        pkg: project.pkg,
      })).run();

    expect(result).toMatchSnapshot();
  });
});
"
`;

exports[`task generator generates multiple correct files with TypeScript for defaults 3`] = `
"import { BaseTask, Task } from '@checkup/core';
import { Result } from 'sarif';

export default class MyBarTask extends BaseTask implements Task {
  taskName = 'my-bar';
  taskDisplayName = 'My Bar';
  description = '';
  category = '';

  async run(): Promise<Result[]> {
    this.addResult(
      \`\${this.taskName} result\`,
      'informational',
      'note'
    );
      
    return this.results;
  }
}
"
`;

exports[`task generator generates multiple correct files with TypeScript for defaults 4`] = `
"import { CheckupProject, getTaskContext } from '@checkup/test-helpers';
import { getPluginName } from '@checkup/core';
import MyBarTask from '../src/tasks/my-bar-task';

describe('my-bar-task', () => {
  let project: CheckupProject;
  let pluginName = getPluginName(__dirname);

  beforeEach(() => {
    project = new CheckupProject('checkup-app', '0.0.0', project => {
      // add dependencies here
    });

    project.writeSync();
    project.gitInit();
  });

  afterEach(() => {
    project.dispose();
  });

  it('can read task as JSON', async () => {
    const result = await new MyBarTask(
      pluginName, 
      getTaskContext({
        options: { cwd: project.baseDir },
        pkg: project.pkg,
      })).run();

    expect(result).toMatchSnapshot();
  });
});
"
`;

exports[`task generator generates multiple correct files with TypeScript for defaults 5`] = `
"import { RegistrationArgs, getPluginName } from '@checkup/core';

import MyBarTask from './tasks/my-bar-task';

import MyFooTask from './tasks/my-foo-task';

export function register(args: RegistrationArgs) {
  let pluginName = getPluginName(__dirname);

  args.register.task(new MyFooTask(pluginName, args.context));
  args.register.task(new MyBarTask(pluginName, args.context));
}
"
`;
